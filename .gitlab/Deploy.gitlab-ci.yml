variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

# cache:
#   untracked: true
#   key: "$CI_BUILD_REF_NAME"
#   paths:
#     - /opt/pysetup/.venv
#   policy: pull-push

.auto-deploy:
  image: "registry.gitlab.com/gitlab-org/cluster-integration/auto-deploy-image:v2.28.2"
  dependencies: []

review:
  extends: .auto-deploy
  stage: review
  variables:
    POSTGRES_HOST_AUTH_METHOD: trust
    POSTGRES_PASSWORD: local_db_password
    POSTGRES_USER: postgres
  script:
    - auto-deploy check_kube_domain
    - auto-deploy download_chart
    - auto-deploy ensure_namespace
    - auto-deploy initialize_tiller
    - auto-deploy create_secret
    - auto-deploy deploy
    - auto-deploy persist_environment_url
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: http://$CI_PROJECT_ID-$CI_ENVIRONMENT_SLUG.$KUBE_INGRESS_BASE_DOMAIN
    on_stop: stop_review
  artifacts:
    paths: [environment_url.txt, tiller.log]
    when: always
  rules:
    - if: '$CI_KUBERNETES_ACTIVE == null || $CI_KUBERNETES_ACTIVE == ""'
      when: never
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "release"'
      when: never
    - if: "$REVIEW_DISABLED"
      when: never
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+/'
      when: never
    - if: "$CI_COMMIT_BRANCH"

stop_review:
  extends: .auto-deploy
  stage: cleanup
  variables:
    GIT_STRATEGY: none
  script:
    - auto-deploy initialize_tiller
    - auto-deploy delete
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  allow_failure: true
  rules:
    - if: '$CI_KUBERNETES_ACTIVE == null || $CI_KUBERNETES_ACTIVE == ""'
      when: never
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "release"'
      when: never
    - if: "$REVIEW_DISABLED"
      when: never
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+/'
      when: never
    - if: "$CI_COMMIT_BRANCH"
      when: manual

# Staging deploys are disabled by default since
# continuous deployment to production is enabled by default
# If you prefer to automatically deploy to staging and
# only manually promote to production, enable this job by setting
# STAGING_ENABLED.

staging:
  extends: .auto-deploy
  stage: staging
  script:
    - auto-deploy check_kube_domain
    - auto-deploy download_chart
    - auto-deploy ensure_namespace
    - auto-deploy initialize_tiller
    - auto-deploy create_secret
    - auto-deploy deploy
  environment:
    name: staging
    url: http://$CI_PROJECT_PATH_SLUG-staging.$KUBE_INGRESS_BASE_DOMAIN
  rules:
    - if: '$CI_KUBERNETES_ACTIVE == null || $CI_KUBERNETES_ACTIVE == ""'
      when: never
    - if: '$CI_COMMIT_BRANCH != "master"'
      when: never
    - if: '$CI_COMMIT_BRANCH != "release"'
      when: never
    - if: "$STAGING_ENABLED"

# Canaries are disabled by default, but if you want them,
# and know what the downsides are, you can enable this by setting
# CANARY_ENABLED.

canary:
  extends: .auto-deploy
  stage: canary
  allow_failure: true
  script:
    - auto-deploy check_kube_domain
    - auto-deploy download_chart
    - auto-deploy ensure_namespace
    - auto-deploy initialize_tiller
    - auto-deploy create_secret
    - auto-deploy deploy canary
  environment:
    name: production
    url: http://$CI_PROJECT_PATH_SLUG.$KUBE_INGRESS_BASE_DOMAIN
  rules:
    - if: '$CI_KUBERNETES_ACTIVE == null || $CI_KUBERNETES_ACTIVE == ""'
      when: never
    - if: '$CI_COMMIT_BRANCH != "master" && $CI_COMMIT_BRANCH != "release"'
      when: never
    - if: "$CANARY_ENABLED"
      when: manual

.production: &production_template
  extends: .auto-deploy
  stage: production
  script:
    - auto-deploy check_kube_domain
    - auto-deploy download_chart
    - auto-deploy ensure_namespace
    - auto-deploy initialize_tiller
    - auto-deploy create_secret
    - auto-deploy deploy
    - auto-deploy delete canary
    - auto-deploy delete rollout
    - auto-deploy persist_environment_url
  environment:
    name: production
    url: http://$CI_PROJECT_PATH_SLUG.$KUBE_INGRESS_BASE_DOMAIN
  artifacts:
    paths: [environment_url.txt, tiller.log]
    when: always

development:
  <<: *production_template
  environment:
    name: development
  rules:
    - if: '$CI_KUBERNETES_ACTIVE == null || $CI_KUBERNETES_ACTIVE == ""'
      when: never
    - if: '$CI_COMMIT_BRANCH == "master"'

qa:
  <<: *production_template
  environment:
    name: qa
  rules:
    - if: '$CI_KUBERNETES_ACTIVE == null || $CI_KUBERNETES_ACTIVE == ""'
      when: never
    - if: "$STAGING_ENABLED"
      when: never
    - if: "$CANARY_ENABLED"
      when: never
    - if: "$INCREMENTAL_ROLLOUT_ENABLED"
      when: never
    - if: "$INCREMENTAL_ROLLOUT_MODE"
      when: never
    - if: '$CI_COMMIT_BRANCH == "release"'

production:
  <<: *production_template
  environment:
    name: production
  rules:
    - if: '$CI_KUBERNETES_ACTIVE == null || $CI_KUBERNETES_ACTIVE == ""'
      when: never
    - if: "$STAGING_ENABLED"
      when: never
    - if: "$CANARY_ENABLED"
      when: never
    - if: "$INCREMENTAL_ROLLOUT_ENABLED"
      when: never
    - if: "$INCREMENTAL_ROLLOUT_MODE"
      when: never
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+/'

production_manual:
  <<: *production_template
  environment:
    name: production
  allow_failure: false
  rules:
    - if: '$CI_KUBERNETES_ACTIVE == null || $CI_KUBERNETES_ACTIVE == ""'
      when: never
    - if: "$INCREMENTAL_ROLLOUT_ENABLED"
      when: never
    - if: "$INCREMENTAL_ROLLOUT_MODE"
      when: never
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+/ && $STAGING_ENABLED'
      when: manual
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+/ && $CANARY_ENABLED'
      when: manual
